import streamlit as st
import streamlit_folium
from streamlit_folium import st_folium
import geemap
import geemap.foliumap as geemap
import ee
import plotly.express as px
import folium
import pandas as pd
import geopandas as gpd
from datetime import datetime
import json
from utils_gee import maskCloudAndShadowsSR, add_indices


# Autentica√ß√£o com Earth Engine
# service_account = 'my-service-account@...gserviceaccount.com'
# credentials = ee.ServiceAccountCredentials(service_account, 'ee-scriptsremoteambgeo-040e397e0cc0.json')
# ee.Initialize(credentials)
# Inicializa um mapa apenas para garantir autentica√ß√£o do Earth Engine
auth_map = geemap.Map()
# Configura√ß√£o da p√°gina
st.set_page_config(layout="wide")
st.title('Aplicativo para sele√ß√£o de imagens, c√°lculo de √≠ndices e download das imagens')
st.markdown(""" 
#### O APP foi desenvolvido para que o usu√°rio possa carregar a regi√£o de interesse, definir o per√≠odo e visualizar o diferentes √≠ndices de vegeta√ß√£o e √°gua. 
A aplica√ß√£o processa imagens do Sentinel 2, Dataset dispon√≠vel no Google Earth Engine. 
Ap√≥s carregar o arquivo √© poss√≠vel inspecionar quantas imagens existem na regi√£o de interesse, selecionar as datas que deseja visualizar e ativar os √≠ndices no painel lateral.
""")

##Defina a regi√£o de interesse.
roi = None
m = geemap.Map(height=800)

# Upload do arquivo GeoJSON
st.sidebar.subheader("Carregue um arquivo no formato GeoJSON:")
uploaded_file = st.sidebar.file_uploader("Fa√ßa o upload da sua √°rea de estudo", type=["geojson"])
st.sidebar.markdown("""### Para criar o arquivo **GeoJSON** use o site [geojson.io](https://geojson.io/#new&map=2/0/20).""")

if uploaded_file is not None:
    gdf = gpd.read_file(uploaded_file)
    shp_json = gdf.to_json()
    f_json = json.loads(shp_json)['features']
    roi = ee.FeatureCollection(f_json)
    st.sidebar.success("Arquivo carregado com sucesso!")

point = ee.Geometry.Point(-45.259679, -17.871838)
m.centerObject(point, 8)
m.setOptions("HYBRID")

start_date = st.sidebar.date_input("Selecione a data inicial", datetime(2024, 1, 1))
end_date = st.sidebar.date_input("Selecione a data final", datetime.now())
cloud_percentage_limit = st.sidebar.slider("Limite de percentual de nuvens", 0, 100, 5)

if roi is not None:
  # Fun√ß√£o de nuvens, fator de escala e clip
    def maskCloudAndShadowsSR(image):
        cloudProb = image.select('MSK_CLDPRB');
        snowProb = image.select('MSK_SNWPRB');
        cloud = cloudProb.lt(5)
        snow = snowProb.lt(5)
        scl = image.select('SCL')
        shadow = scl.eq(3)  # 3 = cloud shadow
        cirrus = scl.eq(10)  # 10 = cirrus
        # Probabilidade de nuvem inferior a 5% ou classifica√ß√£o de sombra de nuvem
        mask = (cloud.And(snow)).And(cirrus.neq(1)).And(shadow.neq(1));
        return image.updateMask(mask)\
            .select("B.*")\
            .divide(10000)\
            .clip(roi)\
            .copyProperties(image, image.propertyNames())

    # C√°lculo do √≠ndice
    def indice(image):
        ndvi = image.normalizedDifference(['B8','B4']).rename('ndvi')
        ndre = image.normalizedDifference(['B8','B5']).rename('ndre') 
        evi = image.expression(
            'G * ((NIR - RED) / (NIR + C1 * RED - C2 * BLUE + L))',
            {
                'G': 2.5,
                'NIR': image.select('B8'),
                'RED': image.select('B4'),
                'BLUE': image.select('B2'),
                'C1': 6.0,
                'C2': 7.5,
                'L': 1.0
            }
        ).rename('evi')
        mndwi = image.normalizedDifference(['B3','B11']).rename('mndwi')
        ndwi = image.normalizedDifference(['B3','B8']).rename('ndwi')
        ndmi = image.normalizedDifference(['B8','B11']).rename('ndmi')
        ndpi = image.normalizedDifference(['B11','B3']).rename('ndpi')
        spri = image.normalizedDifference(['B2','B3']).rename('spri')
             
        savi = image.expression(
                '((NIR - RED) / (NIR + RED + L)) * (1 + L)',
                {
                    'NIR': image.select('B8'), # Infravermelho pr√≥ximo
                    'RED': image.select('B4'), # Vermelho
                    'L': 0.5 # Fator de ajuste do solo (0.5 para vegeta√ß√£o)
                }
            ).rename('savi')
        
        return image.addBands([ndvi, ndre,evi,ndwi,mndwi,ndmi,ndpi,spri,savi]).set({'data': image.date().format('yyyy-MM-dd')})

           
    # Cole√ß√£o de imagens 
    collection = ee.ImageCollection("COPERNICUS/S2_SR_HARMONIZED")\
                    .filterBounds(roi)\
                    .filter(ee.Filter.date(start_date.strftime('%Y-%m-%d'), end_date.strftime('%Y-%m-%d')))\
                    .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', cloud_percentage_limit))\
                    .map(maskCloudAndShadowsSR)\
                    .map(indice)
        # Criar a tabela usando os dados da cole√ß√£o filtrada
    data_table = pd.DataFrame({
        "Data": collection.aggregate_array("data").getInfo(),
        "Percentual de Nuvens": collection.aggregate_array("CLOUDY_PIXEL_PERCENTAGE").getInfo(),
        "ID": collection.aggregate_array("system:id").getInfo()
    })
    
      # ##Data Frame
    # expander.write(data_table)
    st.divider()
    # Fun√ß√£o para aplicar a redu√ß√£o por regi√µes para toda a cole√ß√£o usando map
    def reduce_region_for_collection(img):
        # Obt√©m a data da imagem
        date = img.date().format('yyyy-MM-dd')

        # Aplica a redu√ß√£o por regi√µes para a imagem
        stats = img.reduceRegions(
            collection=roi,
            reducer=ee.Reducer.mean(),
            scale=10  # Defina a escala apropriada para sua aplica√ß√£o
        )

        # Adiciona a data √† propriedade 'data'
        stats = stats.map(lambda f: f.set('data', date))

        return stats

    # Aplica a redu√ß√£o por regi√µes para toda a cole√ß√£o usando map
    bands = ['ndvi', 'ndre','evi','ndwi','mndwi','ndmi','ndpi','spri','savi']
    stats_collection = collection.select(bands).map(reduce_region_for_collection)

    # Converte para df
    df = geemap.ee_to_df(stats_collection.flatten())

    # Adiciona a data como coluna no formato datetime
    df['datetime'] = pd.to_datetime(df['data'], format='%Y-%m-%d')

    # Verificar se todas as colunas necess√°rias est√£o presentes e adicionar colunas ausentes com NaN
    # Plotar gr√°fico usando Plotly Express
    fig = px.line(df, x='datetime', y=bands, title='S√©rie Temporal de √çndices', 
                labels={'value': '√çndice', 'variable': 'Tipo de √çndice'},
                line_dash='variable', line_group='variable')
    
    fig_bar = px.bar(df, x='datetime', y=bands, 
                 title='Gr√°fico de Barras de √çndices',
                 labels={'value': '√çndice', 'variable': 'Tipo de √çndice'},
                 barmode='group')

    
    ##criando coluna 1 e 2 
    col1, col2 = st.columns([0.6,0.4])
    # Exibir o gr√°fico no Streamlit
    with col1:
         tab1, tab2 = st.tabs(["üìà Gr√°fico de Linha", "üìà Imagens Dispon√≠veis"])
         tab1.subheader('Gr√°fico')
         tab1.plotly_chart(fig, use_container_width=True)
         ##Tabela 2 
         tab2.subheader("Tabela de Informa√ß√µes")
         tab2.write(data_table)
        

    with col2:
        tab3, tab4 = st.tabs(["üìà Gr√°fico de Linha", "üìà Imagens Dispon√≠veis"])
        tab3.subheader('Gr√°fico')
        tab3.plotly_chart(fig_bar, use_container_width=True)
        tab4.subheader('DataFrame')
        tab4.dataframe(df.style.set_table_styles([{'selector': 'table', 'props': [('width', '400px')]}]))
    
    st.divider()
    

    contour_image = ee.Image().byte().paint(featureCollection=roi, color=1, width=2)
    m.addLayer(contour_image, {'palette': 'FF0000'}, 'Regi√£o de Interesse')
    m.centerObject(roi, 13)
    
     # ================== ADICIONAR MOSAICO DE √çNDICE ==================
    # Lista de √≠ndices de vegeta√ß√£o e de √°gua
    vegetation_indices = ['ndvi', 'evi', 'savi']
    water_indices = ['ndwi', 'mndwi', 'ndmi']

    # √öltimos 10 dias do per√≠odo
    end_ee = ee.Date(end_date.strftime('%Y-%m-%d'))
    start_ee = end_ee.advance(-10, 'day')

    # Filtra e processa a cole√ß√£o recente
    recent_collection = collection.filterDate(start_ee, end_ee)

    # Escolher o √≠ndice para visualiza√ß√£o (voc√™ pode tornar isso interativo se quiser)
    selected_index = st.sidebar.selectbox("üìå √çndice para visualiza√ß√£o espacial:",
                                          vegetation_indices + water_indices, index=0)

    # Calcular imagem m√©dia para esse √≠ndice
    mean_index_image = recent_collection.select(selected_index).mean()

    # Paleta e estilo de visualiza√ß√£o
    if selected_index in vegetation_indices:
        palette = ['red', 'yellow', 'green']
    elif selected_index in water_indices:
        palette = ['cyan', 'blue', 'darkblue']
    else:
        palette = ['gray']  # fallback

    # Adicionar camada ao mapa
    m.addLayer(mean_index_image, {
        'min': -1,
        'max': 1,
        'palette': palette
    }, f'{selected_index.upper()} - M√©dia √∫ltimos 10 dias')

m.to_streamlit()

st.sidebar.markdown('Desenvolvido por [Christhian Cunha](https://www.linkedin.com/in/christhian-santana-cunha/)')
st.sidebar.markdown('Conhe√ßa nossas forma√ß√µes [AmbGEO](https://ambgeo.com/)')